import { useEffect, useState } from 'react'
import { useNavigate, useSearchParams } from 'react-router-dom'
import { useGoogleCalendar } from '@/hooks/useGoogleCalendar'
import { useAuth } from '@/hooks/useAuth'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { CheckCircle, XCircle, Loader2, Calendar } from 'lucide-react'

export function CalendarCallback() {
  const [searchParams] = useSearchParams()
  const navigate = useNavigate()
  const { user, loading: authLoading, restoreSessionAfterOAuth } = useAuth()
  const { handleOAuthCallback } = useGoogleCalendar()
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading')
  const [message, setMessage] = useState('')

  useEffect(() => {
    const processCallback = async () => {
      console.log('üîÑ Iniciando procesamiento de callback...')
      console.log('üë§ Usuario actual:', user ? user.id : 'No autenticado')
      console.log('‚è≥ Auth loading:', authLoading)

      // Esperar a que la autenticaci√≥n se resuelva
      if (authLoading) {
        console.log('‚è≥ Esperando a que se resuelva la autenticaci√≥n...')
        return
      }

      // Si no hay usuario, intentar restaurar sesi√≥n
      if (!user) {
        console.log('üîÑ Intentando restaurar sesi√≥n despu√©s de OAuth...')
        try {
          await restoreSessionAfterOAuth()
          // Dar un momento para que la sesi√≥n se actualice
          setTimeout(() => {
            processCallback()
          }, 1000)
          return
        } catch (error) {
          console.error('‚ùå Error restaurando sesi√≥n:', error)
        }
      }

      // Verificar que el usuario est√© autenticado
      if (!user) {
        console.log('‚ùå Usuario no autenticado en callback')
        setStatus('error')
        setMessage('Tu sesi√≥n expir√≥ durante la autorizaci√≥n. Por favor inicia sesi√≥n de nuevo y vuelve a intentar.')
        return
      }

      // Obtener c√≥digo de autorizaci√≥n de la URL
      const code = searchParams.get('code')
      const error = searchParams.get('error')

      console.log('üîë C√≥digo OAuth:', code ? code.substring(0, 10) + '...' : 'No recibido')
      console.log('‚ùå Error OAuth:', error || 'Ninguno')

      // Si el usuario cancel√≥ la autorizaci√≥n
      if (error) {
        console.log('‚ùå Usuario cancel√≥ la autorizaci√≥n:', error)
        setStatus('error')
        setMessage(`Error en la autorizaci√≥n: ${error}`)
        return
      }

      // Si no hay c√≥digo, algo sali√≥ mal
      if (!code) {
        console.log('‚ùå No se recibi√≥ c√≥digo de autorizaci√≥n')
        setStatus('error')
        setMessage('No se recibi√≥ el c√≥digo de autorizaci√≥n')
        return
      }

      try {
        console.log('üîÑ Procesando callback OAuth con usuario:', user.id)
        
        // Procesar el callback OAuth de forma segura
        await handleOAuthCallback(code)
        
        console.log('‚úÖ OAuth callback procesado exitosamente')
        setStatus('success')
        setMessage('¬°Google Calendar conectado exitosamente!')
        
        // Redirigir al calendario despu√©s de 2 segundos
        setTimeout(() => {
          navigate('/calendario')
        }, 2000)
        
      } catch (error) {
        console.error('‚ùå Error procesando OAuth callback:', error)
        setStatus('error')
        setMessage(
          error instanceof Error 
            ? error.message 
            : 'Error al conectar Google Calendar. Por favor intenta de nuevo.'
        )
      }
    }

    processCallback()
  }, [searchParams, user, authLoading, handleOAuthCallback, navigate, restoreSessionAfterOAuth])

  return (
    <div className="min-h-screen bg-base flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="mx-auto mb-4">
            {status === 'loading' && (
              <Loader2 className="h-12 w-12 text-blue animate-spin" />
            )}
            {status === 'success' && (
              <CheckCircle className="h-12 w-12 text-green" />
            )}
            {status === 'error' && (
              <XCircle className="h-12 w-12 text-red" />
            )}
          </div>
          <CardTitle className="text-xl">
            {status === 'loading' && 'Conectando Google Calendar...'}
            {status === 'success' && '¬°Conexi√≥n Exitosa!'}
            {status === 'error' && 'Error de Conexi√≥n'}
          </CardTitle>
        </CardHeader>
        
        <CardContent className="text-center space-y-4">
          <p className="text-subtext0">
            {message}
          </p>
          
          {status === 'loading' && (
            <div className="text-sm text-subtext1">
              {authLoading 
                ? 'Verificando tu sesi√≥n...' 
                : (!user ? 'Restaurando sesi√≥n...' : 'Procesando autorizaci√≥n de Google Calendar...')}
            </div>
          )}
          
          {status === 'success' && (
            <div className="space-y-3">
              <div className="text-sm text-green">
                Ser√°s redirigido al calendario autom√°ticamente
              </div>
              <Button 
                onClick={() => navigate('/calendario')}
                className="w-full gap-2"
              >
                <Calendar className="h-4 w-4" />
                Ir al Calendario
              </Button>
            </div>
          )}
          
          {status === 'error' && (
            <div className="space-y-3">
              {!user && (
                <Button 
                  onClick={() => navigate('/login')}
                  className="w-full"
                >
                  Iniciar Sesi√≥n
                </Button>
              )}
              <Button 
                onClick={() => navigate('/calendario')}
                className="w-full"
                variant={!user ? "outline" : "default"}
              >
                Volver al Calendario
              </Button>
              <Button 
                variant="outline"
                onClick={() => navigate('/google-calendar-diagnostic')}
                className="w-full text-xs"
              >
                Diagn√≥stico de Configuraci√≥n
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
} 